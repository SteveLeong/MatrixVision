{"version":3,"sources":["components/symbol.js","components/stream.js","App.js","serviceWorker.js","index.js"],"names":["Symbol","x","y","speed","first","Object","classCallCheck","this","x1","y1","speed1","first1","average","symbolData","rand","Math","floor","random","value","imgData","count","total","k","data","length","height","Stream","fontSize","symbols","totalSymbols","round","i","symbol","setRandomSymbol","push","ctx","forEach","fillStyle","fillText","animate","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","setUp","setUpVideo","video","getSymbols","canvas","width","sfontSize","stream","generateSymbols","streams","navigator","mediaDevices","getUserMedia","audio","then","localMediaStream","console","log","srcObject","play","catch","err","error","xcoor","ycoor","String","fromCharCode","getImageData","j","arr","Array","sort","a","b","interval","index","paintToCanvas","drawImage","matrixify","requestAnimationFrame","size","brightness","getBrightness","ceil","setToVideoSymbol","clearRect","render","refs","getContext","font","strip","react_default","createElement","id","style","backgroundColor","onClick","logStuff","ref","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37e29c57.chunk.js","sourcesContent":["class Symbol {\n  constructor(x, y, speed, first) {\n    this.x1 = x;\n    this.y1 = y;\n    this.speed1 = speed;\n    this.first1 = first;\n    this.average = 0;\n  }\n\n  setRandomSymbol(symbolData) {\n    var rand = Math.floor(Math.random() * 95);\n    this.value = symbolData[rand][1];\n  }\n\n  setToVideoSymbol(symbolData) {\n    this.value = symbolData[this.average];\n  }\n\n  getBrightness(imgData) {\n    var count = 1;\n    var total = 0;\n    for (var k = 0; k < imgData.data.length; k += 4) {\n      total +=\n        0.2126 * imgData.data[k] +\n        0.7152 * imgData.data[k + 1] +\n        0.0722 * imgData.data[k + 2];\n      count++;\n    }\n    return [total, count];\n  }\n\n  animate(height) {\n    this.y1 = this.y1 >= height ? 0 : (this.y1 += this.speed1);\n  }\n}\n\nexport default Symbol;\n","import Symbol from \"./symbol\";\n\nclass Stream {\n  constructor(height, fontSize) {\n    this.symbols = [];\n    this.totalSymbols = height / fontSize;\n    this.speed = Math.random() * 6 + 2;\n    this.first = Math.round(Math.random() * 3) === 1;\n  }\n\n  generateSymbols(x, y, fontSize, symbolData) {\n    for (var i = 0; i <= this.totalSymbols; i++) {\n      var symbol = new Symbol(x, y, this.speed, this.first, symbolData);\n\n      symbol.setRandomSymbol(symbolData);\n      this.symbols.push(symbol);\n\n      y -= fontSize;\n      this.first = false;\n    }\n  }\n\n  render(ctx, height) {\n    this.symbols.forEach(function(symbol) {\n      if (symbol.first) {\n        ctx.fillStyle = \"#09ff08\";\n      } else {\n        ctx.fillStyle = \"#00a800\";\n      }\n      ctx.fillText(symbol.value, symbol.x1, symbol.y1);\n      symbol.animate(height);\n    });\n  }\n}\n\nexport default Stream;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Stream from \"./components/stream\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sfontSize = 11;\n    this.symbols = new Array(25);\n    this.symbolData = []; // All 96 Katakana symbols and theyre respective RGB totals\n    this.streams = [];\n  }\n\n  componentDidMount() {\n    this.video = this.refs.video;\n    this.canvas = this.refs.canvas;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.ctx.font = \"11px monospace\";\n    this.ctx.fillStyle = \"#00BB00\";\n    this.strip = this.refs.strip;\n\n    this.setUp();\n  }\n\n  setUp = () => {\n    this.setUpVideo(this.video);\n    this.getSymbols();\n    var x = 0;\n    for (var i = 0; i <= this.canvas.width / this.sfontSize; i++) {\n      var stream = new Stream(this.canvas.height, this.sfontSize);\n      stream.generateSymbols(\n        x,\n        Math.random() - 500,\n        this.sfontSize,\n        this.symbolData\n      );\n      this.streams.push(stream);\n      x += this.sfontSize;\n    }\n  };\n\n  setUpVideo = video => {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices\n        .getUserMedia({ video: true, audio: false })\n        .then(localMediaStream => {\n          console.log(localMediaStream);\n          video.srcObject = localMediaStream;\n          video.play();\n        })\n        .catch(err => {\n          console.error(\"Please enable your webcam\", err);\n        });\n    }\n  };\n\n  getSymbols = () => {\n    // Get Katakana symbols\n    var xcoor = 0;\n    var count = 0;\n    var ycoor = 10;\n    var symbol;\n\n    for (var i = 0; i < 96; i++) {\n      // get symbol, 0x30A0 is where Katakana starts\n      symbol = String.fromCharCode(0x30a0 + i);\n\n      // if its trying to print off the canvas\n      if (count * 12 + 20 > this.canvas.width) {\n        count = 0;\n        ycoor += 10;\n      }\n\n      xcoor = count * 12 + 20;\n\n      this.ctx.fillText(symbol, xcoor, ycoor);\n\n      // get the 'brightness' of the symbol, Black=000, so brightness is the amount of RGB in the symbol\n      // getImageData(x, y, width, height)\n\n      var imgData = this.ctx.getImageData(\n        xcoor,\n        ycoor - 10,\n        7,\n        this.sfontSize - 1\n      );\n\n      // total is the total RGB value of the symbol\n      var total = 0; //reset\n      for (var j = 0; j < imgData.data.length; j += 4) {\n        total += imgData.data[j] + imgData.data[j + 1] + imgData.data[j + 2];\n      }\n\n      var arr = new Array(2);\n      arr[0] = total;\n      arr[1] = symbol;\n      this.symbolData.push(arr);\n      count++;\n    }\n\n    // Sort symbols by total values\n    this.symbolData.sort(function(a, b) {\n      return a[0] - b[0];\n    });\n\n    // Take 25 symbols\n    var interval = Math.floor(this.symbolData.length / this.symbols.length);\n    var index = 0;\n    for (\n      var k = 0;\n      k < this.symbols.length - 1 && index < this.symbolData.length;\n      k++\n    ) {\n      this.symbols[k] = this.symbolData[index][1];\n      // draw them onto empty canvas\n      this.ctx.fillText(this.symbols[k], k * 10 + 20, 90);\n      index += interval;\n    }\n\n    // Last symbol is always has biggest total RGB\n    this.symbols[this.symbols.length - 1] = this.symbolData[\n      this.symbolData.length - 1\n    ][1];\n  };\n\n  paintToCanvas = () => {\n    this.ctx.drawImage(this.video, 0, 0);\n    this.matrixify();\n    requestAnimationFrame(this.paintToCanvas);\n  };\n\n  matrixify = () => {\n    var height = this.canvas.height;\n    var ctx = this.ctx;\n    var symbols = this.symbols;\n    var size = this.sfontSize;\n    this.streams.forEach(function(stream) {\n      stream.symbols.forEach(function(symbol) {\n        var imgData = ctx.getImageData(symbol.x1, symbol.y1, 7, size);\n        var brightness = symbol.getBrightness(imgData);\n        var total = brightness[0] / brightness[1];\n\n        symbol.average = Math.ceil(total / stream.symbols.length);\n        symbol.setToVideoSymbol(symbols);\n      });\n    });\n\n    ctx.clearRect(0, 0, this.canvas.width, height);\n\n    this.streams.forEach(function(stream) {\n      stream.render(ctx, height);\n    });\n  };\n\n  render() {\n    return (\n      <div id=\"container\" style={{ backgroundColor: \"black\" }}>\n        <div id=\"description\">\n          For my Final Project I decided to do an Interactive Artwork inspired\n          by the movie 'Matrix'. In the movie, there is a scene where the main\n          character sees 'code' in his vision, overlayed on top of reality. I\n          thought it would be cool to recreate this effect using a webcam. There\n          were two main resources I used to create this project. (1) gave me an\n          outlined steps on how they went about changing the pixels of a webcam.\n          (2) helped me figure out how to get symbols to stream down.\n        </div>\n\n        <div>Make Sure Your Webcam is Enabled!</div>\n        <div id=\"controller\">\n          <button onClick={this.paintToCanvas}>Matrixify</button>\n          <button onClick={this.logStuff}>Take Photo</button>\n        </div>\n        <canvas ref=\"canvas\" width=\"640\" height=\"480\" />\n        {/* <Canvas /> */}\n        <video ref=\"video\" />\n        <div ref=\"strip\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}